Option Explicit

'=============================================================
' Excel 出力系ユーティリティ
' - タスクのフラット化結果を任意のワークシートへ書き込み
' - テンプレートから複製したシートでも書式を維持しつつ更新
'=============================================================

Public Sub WriteTasksToWorksheet(ByVal ws As Worksheet, _
                                 ByVal headers As Collection, _
                                 ByVal rows As Collection)
    If ws Is Nothing Then Err.Raise vbObjectError + 2100, "WriteTasksToWorksheet", "ワークシートが指定されていません。"

    Dim wasProtected As Boolean
    wasProtected = ws.ProtectContents
    If wasProtected Then On Error Resume Next: ws.Unprotect: On Error GoTo 0

    WriteHeaderAndRows ws, headers, rows

    Dim headerCount As Long
    headerCount = CollectionCount(headers)

    Dim rowCount As Long
    rowCount = CollectionCount(rows)

    UnlockDataCells ws, headerCount, rowCount
    ProtectTasksSheet ws
End Sub

Private Function CollectionCount(ByVal items As Collection) As Long
    On Error Resume Next
    CollectionCount = items.Count
    On Error GoTo 0
End Function

Private Sub WriteHeaderAndRows(ByVal ws As Worksheet, _
                               ByVal headers As Collection, _
                               ByVal rows As Collection)
    If ws Is Nothing Then Exit Sub

    If headers Is Nothing Then Exit Sub

    Dim colIndex As Long
    Dim header As Variant

    colIndex = 1
    For Each header In headers
        ws.Cells(1, colIndex).Value = header
        colIndex = colIndex + 1
    Next header

    Dim rowIndex As Long
    rowIndex = 2

    Dim rowDict As Scripting.Dictionary
    Dim value As Variant

    If rows Is Nothing Then Exit Sub

    For Each rowDict In rows
        colIndex = 1
        For Each header In headers
            If rowDict.Exists(header) Then
                value = SanitizeCellValue(rowDict(header))
                ws.Cells(rowIndex, colIndex).Value = value
            Else
                ws.Cells(rowIndex, colIndex).Value = vbNullString
            End If
            colIndex = colIndex + 1
        Next header
        rowIndex = rowIndex + 1
    Next rowDict
End Sub

Private Function SanitizeCellValue(ByVal value As Variant) As Variant
    If VarType(value) = vbString Then
        SanitizeCellValue = RemoveIllegalCharacters(CStr(value))
    Else
        SanitizeCellValue = value
    End If
End Function

Private Function RemoveIllegalCharacters(ByVal text As String) As String
    Dim i As Long
    Dim code As Long
    Dim builder As String
    For i = 1 To Len(text)
        code = AscW(Mid$(text, i, 1))
        If code < 0 Then
            code = code + 65536
        End If
        If code = 9 Or code = 10 Or code = 13 Or code >= 32 Then
            builder = builder & Mid$(text, i, 1)
        End If
    Next i
    RemoveIllegalCharacters = builder
End Function

Private Sub UnlockDataCells(ByVal ws As Worksheet, _
                            ByVal headerCount As Long, _
                            ByVal rowCount As Long)
    If headerCount = 0 Then Exit Sub
    If rowCount < 0 Then rowCount = 0

    Dim lastRow As Long
    lastRow = rowCount + 1
    ws.Range(ws.Cells(1, 1), ws.Cells(lastRow, headerCount)).Locked = False
End Sub

Private Sub ProtectTasksSheet(ByVal ws As Worksheet)
    On Error Resume Next
    ws.Protect DrawingObjects:=False, Contents:=True, Scenarios:=False, _
               AllowFormattingColumns:=False, AllowFormattingRows:=False, _
               AllowInsertingColumns:=False, AllowInsertingRows:=False, _
               AllowDeletingColumns:=False, AllowDeletingRows:=False, _
               AllowSorting:=False, AllowFiltering:=False, AllowUsingPivotTables:=False
    On Error GoTo 0
End Sub

Public Function BuildFlatRows(ByVal tasks As Variant) As Collection
    Dim output As Collection
    Set output = New Collection

    If IsObject(tasks) Then
        Dim task As Variant
        For Each task In tasks
            Dim dict As Scripting.Dictionary
            Set dict = FlattenDictionary(task)
            output.Add dict
        Next task
    ElseIf IsArray(tasks) Then
        Dim i As Long
        For i = LBound(tasks) To UBound(tasks)
            Dim dict2 As Scripting.Dictionary
            Set dict2 = FlattenDictionary(tasks(i))
            output.Add dict2
        Next i
    End If

    Set BuildFlatRows = output
End Function
